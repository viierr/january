#include "fmt/format.h"

/**
 * @brief: Contains config files data
 * TODO: CMake Files
*/

const std::string LaunchJson =
    "{{\n"
      "\t\"version\": \"0.2.0\",\n"
      "\t\"configurations\": [\n"
          "\t\t{{\n"
          "\t\t\"name\": \"debug\",\n"
          "\t\t\"type\": \"{}\",\n"
          "\t\t\"request\": \"launch\",\n"
          "\t\t\"program\": \"{}\",\n"
          "\t\t\"args\": [],\n"
          "\t\t\"stopAtEntry\": false,\n"
          "\t\t\"cwd\": \"${{workspaceFolder}}\",\n"
          "\t\t\"environment\": [],\n"
          "\t\t\"externalConsole\": true\n"
          "\t}}\n"
      "\t]\n"
    "}}";

const std::string LaunchJsonCmake =
    "{{\n"
      "\t\"version\": \"0.2.0\",\n"
      "\t\"configurations\": [\n"
          "\t\t{{\n"
          "\t\t\"name\": \"dbg\",\n"
          "\t\t\"type\": \"{}\",\n"
          "\t\t\"request\": \"launch\",\n"
          "\t\t\"program\": \"bin/debug/{}\",\n"
          "\t\t\"args\": [],\n"
          "\t\t\"stopAtEntry\": false,\n"
          "\t\t\"cwd\": \"${{workspaceFolder}}\",\n"
          "\t\t\"environment\": [],\n"
          "\t\t\"externalConsole\": true,\n"
          "\t\t\"preLaunchTask\": \"Debug\"\n"
          "\t\t}}\n"
      "\t]\n"
    "}}";

//TODO: find out where vcpkg is?
const std::string VcpkgLibPath = "D:/Git/vcpkg/installed/{}-windows{}/lib/";
const std::string VcpkgIncludePath = "D:/Git/vcpkg/installed/{}-windows{}/include/";

const std::string CustomBuilder = 
    "@echo off\n"
    "echo Compiling...\n"
    "call \"{vs_path}/VC/Auxiliary/Build/vcvars{address_space}.bat\"\n"
    "cls\n"
    "cl.exe /MT {debug} /EHsc /sdl- /O2 /std:c++{cpp_version} /I {library_incl} /I \"include/\" ^\n"
    "/Febuild/{output_name} ^\n"
    "src/*.cpp {library_lib} \n"
    "del *.obj\n"
    "echo Compiled.";

//TODO: use vswhere to find cl path?
const std::string CppPropretiesJson = 
    "{{\n"
      "\t\"configurations\": [\n"
        "\t\t{{\n"
          "\t\t\t\"name\": \"Win{}\",\n"
          "\t\t\t\"includePath\": [\n"
              "\t\t\t\t\"${{workspaceFolder}}/**\",\n"           
              "\t\t\t\t\"${{vcpkgRoot}}/x64-windows/include\",\n"
              "\t\t\t\t\"${{vcpkgRoot}}/x86-windows/include\",\n"
              "\t\t\t\t\"${{vcpkgRoot}}/x86-windows-static/include\",\n"
              "\t\t\t\t\"${{workspaceFolder}}/include\"\n"
          "\t\t\t],\n"
          "\t\t\t\"defines\": [],\n"
          "\t\t\t\"windowsSdkVersion\": \"10.0.19041.0\",\n"
          "\t\t\t\"compilerPath\": \"{compiler_path}\",\n"
          "\t\t\t\"cStandard\": \"c11\",\n"
          "\t\t\t\"cppStandard\": \"c++{cpp_version}\",\n"
          "\t\t\t\"intelliSenseMode\": \"msvc-{host_arch}\"\n"
        "\t\t}}\n"
      "\t],\n"
      "\t\"version\": 4\n"
    "}}";
  

const std::string SettingsJson = 
    "{\n"
        "\t\"files.associations\": {\n"
            "\t\t\"algorithm\": \"cpp\",\n"
            "\t\t\"array\": \"cpp\",\n"
            "\t\t\"atomic\": \"cpp\",\n"
            "\t\t\"bitset\": \"cpp\",\n"
            "\t\t\"cctype\": \"cpp\",\n"
            "\t\t\"chrono\": \"cpp\",\n"
            "\t\t\"clocale\": \"cpp\",\n"
            "\t\t\"cmath\": \"cpp\",\n"
            "\t\t\"codecvt\": \"cpp\",\n"
            "\t\t\"complex\": \"cpp\",\n"
            "\t\t\"concepts\": \"cpp\",\n"
            "\t\t\"condition_variable\": \"cpp\",\n"
            "\t\t\"csignal\": \"cpp\",\n"
            "\t\t\"cstdarg\": \"cpp\",\n"
            "\t\t\"cstddef\": \"cpp\",\n"
            "\t\t\"cstdint\": \"cpp\",\n"
            "\t\t\"cstdio\": \"cpp\",\n"
            "\t\t\"cstdlib\": \"cpp\",\n"
            "\t\t\"cstring\": \"cpp\",\n"
            "\t\t\"ctime\": \"cpp\",\n"
            "\t\t\"cwchar\": \"cpp\",\n"
            "\t\t\"deque\": \"cpp\",\n"
            "\t\t\"exception\": \"cpp\",\n"
            "\t\t\"functional\": \"cpp\",\n"
            "\t\t\"future\": \"cpp\",\n"
            "\t\t\"initializer_list\": \"cpp\",\n"
            "\t\t\"iomanip\": \"cpp\",\n"
            "\t\t\"ios\": \"cpp\",\n"
            "\t\t\"iosfwd\": \"cpp\",\n"
            "\t\t\"iostream\": \"cpp\",\n"
            "\t\t\"istream\": \"cpp\",\n"
            "\t\t\"iterator\": \"cpp\",\n"
            "\t\t\"limits\": \"cpp\",\n"
            "\t\t\"list\": \"cpp\",\n"
            "\t\t\"locale\": \"cpp\",\n"
            "\t\t\"map\": \"cpp\",\n"
            "\t\t\"memory\": \"cpp\",\n"
            "\t\t\"mutex\": \"cpp\",\n"
            "\t\t\"new\": \"cpp\",\n"
            "\t\t\"optional\": \"cpp\",\n"
            "\t\t\"ostream\": \"cpp\",\n"
            "\t\t\"ratio\": \"cpp\",\n"
            "\t\t\"set\": \"cpp\",\n"
            "\t\t\"shared_mutex\": \"cpp\",\n"
            "\t\t\"sstream\": \"cpp\",\n"
            "\t\t\"stdexcept\": \"cpp\",\n"
            "\t\t\"streambuf\": \"cpp\",\n"
            "\t\t\"string\": \"cpp\","
            "\t\t\"system_error\": \"cpp\",\n"
            "\t\t\"thread\": \"cpp\",\n"
            "\t\t\"tuple\": \"cpp\","
            "\t\t\"type_traits\": \"cpp\",\n"
            "\t\t\"typeindex\": \"cpp\","
            "\t\t\"typeinfo\": \"cpp\","
            "\t\t\"unordered_map\": \"cpp\",\n"
            "\t\t\"utility\": \"cpp\",\n"
            "\t\t\"variant\": \"cpp\",\n"
            "\t\t\"vector\": \"cpp\",\n"
            "\t\t\"xfacet\": \"cpp\",\n"
            "\t\t\"xhash\": \"cpp\",\n"
            "\t\t\"xiosbase\": \"cpp\",\n"
            "\t\t\"xlocale\": \"cpp\",\n"
            "\t\t\"xlocbuf\": \"cpp\",\n"
            "\t\t\"xlocinfo\": \"cpp\",\n"
            "\t\t\"xlocmes\": \"cpp\",\n"
            "\t\t\"xlocmon\": \"cpp\",\n"
            "\t\t\"xlocnum\": \"cpp\",\n"
            "\t\t\"xloctime\": \"cpp\",\n"
            "\t\t\"xmemory\": \"cpp\",\n"
            "\t\t\"xstddef\": \"cpp\",\n"
            "\t\t\"xstring\": \"cpp\",\n"
            "\t\t\"xtr1common\": \"cpp\",\n"
            "\t\t\"xtree\": \"cpp\",\n"
            "\t\t\"xutility\": \"cpp\",\n"
            "\t\t\"random\": \"cpp\",\n"
            "\t\t\"cwctype\": \"cpp\",\n"
            "\t\t\"resumable\": \"cpp\",\n"
            "\t\t\"queue\": \"cpp\",\n"
            "\t\t\"fstream\": \"cpp\",\n"
            "\t\t\"*.ipp\": \"cpp\",\n"
            "\t\t\"numeric\": \"cpp\",\n"
            "\t\t\"charconv\": \"cpp\",\n"
            "\t\t\"filesystem\": \"cpp\",\n"
            "\t\t\"unordered_set\": \"cpp\"\n"
        "\t}\n"
    "}";


const std::string TasksJson = 
    "{\n"
      "\t\"version\": \"2.0.0\",\n"
      "\t\"tasks\": [\n"
        "\t\t{\n"
          "\t\t\t\"type\": \"shell\",\n"
          "\t\t\t\"label\": \"builder\",\n"
          "\t\t\t\"command\": \"tools/builder.bat\",\n"
          "\t\t\t\"problemMatcher\": [],\n"
          "\t\t\t\"group\": {\n"
            "\t\t\t\t\"kind\": \"build\",\n"
            "\t\t\t\t\"isDefault\": true\n"
          "\t\t\t}\n"
        "\t\t}\n"
      "\t]\n"
    "}";

const std::string TasksJsonCmake = 
    "{\n"
      "\t\"version\": \"2.0.0\",\n"
      "\t\"tasks\": [\n"
        "\t\t{\n"
          "\t\t\t\"type\": \"process\",\n"
          "\t\t\t\"label\": \"Debug\",\n"
          "\t\t\t\"command\": \"tools/build_dbg.bat\",\n"
          "\t\t\t\"problemMatcher\": [],\n"
          "\t\t\t\"group\": {\n"
            "\t\t\t\t\"kind\": \"build\",\n"
            "\t\t\t\t\"isDefault\": true\n"
          "\t\t\t},\n"
        "\t\t},\n"
        "\t\t{\n"
          "\t\t\t\"type\": \"process\",\n"
          "\t\t\t\"label\": \"Release\",\n"
          "\t\t\t\"command\": \"tools/build_rel.bat\",\n"
          "\t\t\t\"problemMatcher\": [],\n"
          "\t\t\t\"group\": {\n"
            "\t\t\t\t\"kind\": \"build\",\n"
            "\t\t\t\t\"isDefault\": true\n"
          "\t\t\t}\n"
        "\t\t}\n"
      "\t]\n"
    "}";


const std::string CmakeLists = 
    "cmake_minimum_required(VERSION 3.15.1)\n\n"
    "project({project_name})\n\n"
    "set(CMAKE_CXX_STANDARD {cpp_version})\n"
    "file(GLOB SOURCES \"src/*.cpp\")\n\n"
    "add_compile_definitions(_WIN32 _WINDOWS WIN32)\n\n"
    "if (NOT CMAKE_BUILD_TYPE)\n"
      "\tset(CMAKE_BUILD_TYPE \"Debug\")\n"
      "\tmessage(STATUS \"unspecified build type, defaulting to debug\")\n"
    "endif()\n\n"
    "add_executable({project_name} ${{SOURCES}})\n\n"
    "if (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n"
      "\tadd_compile_definitions({project_name}DEBUG=1)\n"
    "endif()\n\n"
    "include_directories(include/)\n\n"
    "set_target_properties({project_name} PROPERTIES LINK_FLAGS \"/ignore:4099\")\n\n"
    "if (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n"
        "\ttarget_compile_options({project_name} PRIVATE /MTd)\n"
    "else()\n"
        "\ttarget_compile_options({project_name} PRIVATE /MT)\n"
    "endif()\n\n"
    "target_link_libraries({project_name} Winmm.lib Version.lib Setupapi.lib Imm32.lib)\n\n"
    "if (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n"
      "\tset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"/bin/dbg\")\n"
    "else()\n"
      "\tset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"/bin/rel\")\n"
    "endif()";


const std::string BuildCmake = 
    "@echo off\n"
    "cmake -Bbuild_files -H. -DCMAKE_BUILD_TYPE={build_type}\n"
    "cmake --build build_files --config {build_type}\n"
    "move %CD%\\build_files\\{build_type}\\{project_name}.exe %CD%\\bin\\{build_type}\\{project_name}.exe\n";


const std::string DummyMain = 
    "#include <iostream>\n\n"
    "int main() {\n"
    "\tstd::cout << \"Hello, world!\";\n"
    "\tstd::cin.get();\n"
    "\treturn 0;\n"
    "}";